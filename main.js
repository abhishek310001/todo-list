(()=>{"use strict";Math.pow(10,8);var e=36e5;function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}var n={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},r=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,o=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,a=/^([+-])(\d{2})(?::?(\d{2}))?$/;function l(e){return e?parseInt(e):1}function i(e){return e&&parseFloat(e.replace(",","."))||0}var c=[31,null,31,30,31,30,31,31,30,31,30,31];function u(e){return e%400==0||e%4==0&&e%100!=0}function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function s(){document.getElementById("add-todo-form").style.display=""}function m(){const e=document.getElementById("add-to-checklist").value;if(""!==e){const t=document.querySelector(".todo-ul"),n=document.createElement("li");n.className="form-li",n.textContent=e;const r=document.createElement("span");r.className="remove-checklist-item";const o=document.createTextNode("×");n.appendChild(r),r.appendChild(o),t.appendChild(n),document.getElementById("add-to-checklist").value="",document.querySelectorAll(".form-li").length>0&&document.querySelectorAll(".form-li").forEach((e=>{e.addEventListener("click",(function(){e.remove()}))}))}}function f(){const e=document.querySelectorAll(".form-li");for(let t=0;t<e.length;t++)e[t].remove();document.getElementById("add-todo").reset()}function g(){let e=localStorage.getItem("Title"),t=localStorage.getItem("Description"),n=localStorage.getItem("DueDate"),r=localStorage.getItem("Priority"),o=localStorage.getItem("CheckList");if(null==e||null==t||null==n||null==r)return;const a=document.querySelectorAll(".card");for(let e=0;e<a.length;e++)a[e].remove();const l=document.querySelector(".projects"),i=document.createElement("div");i.classList.add("card"),l.appendChild(i);let c={Title:e,Description:t,DueDate:n,Priority:r};for(let e in c){const t=document.createElement("p");t.textContent=`${e}: ${c[e]}`,i.appendChild(t)}const u=document.querySelectorAll("p"),d=document.createElement("p");d.textContent="CheckList Items (Click item when completed):";const s=document.createElement("ul");d.classList.add("check-list-label"),u[u.length-1].appendChild(s),s.appendChild(d);let m=o.split(",");if(""===o)return;for(let e=0;e<m.length;e++){const t=document.createElement("li");t.className="display-li",t.textContent=m[e],t.addEventListener("click",(function(){t.classList.toggle("done")?localStorage.setItem(t.textContent,"true"):t.classList.toggle("display-li")&&localStorage.setItem(t.textContent,"false")})),s.appendChild(t)}const f=document.createElement("button");f.classList.add("remove-todo-button"),f.textContent="Delete/Complete ToDo",i.appendChild(f),f.addEventListener("click",(function(){i.remove(),localStorage.clear()})),window.onload=function(){document.querySelectorAll(".display-li").forEach((e=>{"true"==localStorage.getItem(e.textContent)&&(e.className="done")}))}}let p=[];const y=()=>{let s=document.getElementById("Title").value,m=document.getElementById("Description").value,y=document.getElementById("DueDate").value,D=document.getElementById("Priority").value;if(""==s||""==m||""==y)return void alert("Title, Description, and Due Date are required fields, please try again!");if(function(d,s){var m;t(1,arguments);var f=function(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}(null!==(m=null==s?void 0:s.additionalDigits)&&void 0!==m?m:2);if(2!==f&&1!==f&&0!==f)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof d&&"[object String]"!==Object.prototype.toString.call(d))return new Date(NaN);var g,p=function(e){var t,r={},o=e.split(n.dateTimeDelimiter);if(o.length>2)return r;if(/:/.test(o[0])?t=o[0]:(r.date=o[0],t=o[1],n.timeZoneDelimiter.test(r.date)&&(r.date=e.split(n.timeZoneDelimiter)[0],t=e.substr(r.date.length,e.length))),t){var a=n.timezone.exec(t);a?(r.time=t.replace(a[1],""),r.timezone=a[1]):r.time=t}return r}(d);if(p.date){var y=function(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:e.slice((r[1]||r[2]).length)}}(p.date,f);g=function(e,t){if(null===t)return new Date(NaN);var n=e.match(r);if(!n)return new Date(NaN);var o=!!n[4],a=l(n[1]),i=l(n[2])-1,d=l(n[3]),s=l(n[4]),m=l(n[5])-1;if(o)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,s,m)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var o=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(t,s,m):new Date(NaN);var f=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(c[t]||(u(e)?29:28))}(t,i,d)&&function(e,t){return t>=1&&t<=(u(e)?366:365)}(t,a)?(f.setUTCFullYear(t,i,Math.max(a,d)),f):new Date(NaN)}(y.restDateString,y.year)}if(!g||isNaN(g.getTime()))return new Date(NaN);var D,h=g.getTime(),v=0;if(p.time&&(v=function(t){var n=t.match(o);if(!n)return NaN;var r=i(n[1]),a=i(n[2]),l=i(n[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(r,a,l)?r*e+6e4*a+1e3*l:NaN}(p.time),isNaN(v)))return new Date(NaN);if(!p.timezone){var N=new Date(h+v),S=new Date(0);return S.setFullYear(N.getUTCFullYear(),N.getUTCMonth(),N.getUTCDate()),S.setHours(N.getUTCHours(),N.getUTCMinutes(),N.getUTCSeconds(),N.getUTCMilliseconds()),S}return D=function(t){if("Z"===t)return 0;var n=t.match(a);if(!n)return 0;var r="+"===n[1]?-1:1,o=parseInt(n[2]),l=n[3]&&parseInt(n[3])||0;return function(e,t){return t>=0&&t<=59}(0,l)?r*(o*e+6e4*l):NaN}(p.timezone),isNaN(D)?new Date(NaN):new Date(h+v+D)}(y)<function(e){t(1,arguments);var n=function(e){t(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===d(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}(e);return n.setHours(0,0,0,0),n}(Date.now()))return void alert("You have entered a date that has already passed!  Please enter a date greater than or equal to today.");const h=document.querySelectorAll(".form-li");let v=[];for(let e=0;e<h.length;e++){let t=h[e].textContent.replace("×","");v.push(t)}let N=v.join(", ");return p.push({Title:s,Description:m,DueDate:y,Priority:D,CheckList:N}),function({Title:e,Description:t,DueDate:n,Priority:r},o){localStorage.setItem("Title",e),localStorage.setItem("Description",t),localStorage.setItem("DueDate",n),localStorage.setItem("Priority",r),localStorage.setItem("CheckList",o),g()}({Title:s,Description:m,DueDate:y,Priority:D},N),f(),N};g(),document.querySelector(".add-todo-button").addEventListener("click",s),document.querySelector(".add-to-checklist").addEventListener("click",m),document.querySelector(".reset-button").addEventListener("click",f),document.querySelector(".submit-button").addEventListener("click",y)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,